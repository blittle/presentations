Web Workers

Background threads in the browser - simple and easy

var worker = new Worker('my_task.js');
worker.onmessage = function(event) {
  console.log("Worker said : " + event.data);
};
worker.postMessage('ali');


self.postMessage("I'm working befor postMessage('ali').");
self.onmessage = function(event) {
  self.postMessage('Hi '+event.data);
};

Although the spec isn't implementation specific, generally Web Workers are Operating System Level threads or processes. This means that they have a high initialization cost. They aren't meant to be some thing that you start up a lot of and kill often, rather an object that you keep around for long periods of time to do work.



Objects and values within messages are copied, not shared.

Transferrable Objects - ArrayBuffer.

Because workers are limited in a sandboxed scope, debugging is much easier and concurrency issues are rare.

Terminating a worker:
  myWorker.terminate();
  self.close();

Important methods:
  onmessage
  postMessage  

Workers have access to:
  1) navigator object - appName, appVersion, platform, userAgent
  2) importScripts();
  3) Worker - can create workers within workers
  4) XMLHttpRequest
  5) FileReaderSync - Only available to Workers, allows synchronous I/O
  6) Settimeout
  7) onerror

Chrome Crashes With many workers
  https://code.google.com/p/chromium/issues/detail?id=127990

SharedWorkers 
  Normal workers can only be accessed by the script that spawned it, whereas sharedworkers can be
    accessed by any script of the same domain.
  Only available in Chrome, Safari, and Opera (Not FF or IE)
  
